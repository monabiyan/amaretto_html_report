# HTMLEndFile()
#################################################################################[####
curr_add<-getwd()
setwd(output_address)
zip(zipfile = paste(output_address,'Amaretto_HTML_Report',"_",output_name,sep=''), files = paste('report_html/',sep=''))
setwd(curr_add)
###############################
}
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
create_gene_annotations<-function(module_all_genes_data,Module_Genes_names,Module_regulators_weights)
{
all_genes_names=rownames(module_all_genes_data)
targets_boolean<-c()
regulators_boolean<-c()
regulators_weight<-c()
for (i in 1:length(all_genes_names))
{
gene_name=all_genes_names[i]
a=0
b=0
c=0
if (is.element(gene_name, Module_Genes_names))
{
a<-1
}
if (is.element(gene_name,  rownames(Module_regulators_weights)))
{
b<-1
c<-Module_regulators_weights$module_regulators_weights[rownames(Module_regulators_weights)==gene_name]
}
targets_boolean<-c(targets_boolean,a)
regulators_boolean<-c(regulators_boolean,b)
regulators_weight<-c(regulators_weight,c)
}
df=data.frame(targets_boolean,regulators_boolean,regulators_weight,stringsAsFactors=FALSE)
colnames(df) <- c("targets_boolean", "regulators_boolean","regulators_weight")
rownames(df)<-all_genes_names
return(df)
}
write_tsv<-function(data_in,file_address,row_name=TRUE){
write.table(data_in,file=file_address,sep='\t',quote=F,col.names=T,row.names=row_name)
}
write_gct<-function(data_in,file_address)
{
write('#1.2',file=file_address)
out<-c()
n_col=ncol(data_in)
n_row=nrow(data_in)
second_row<-paste(as.character(n_row),as.character(n_col),sep="\t")
write(second_row,file=file_address,append = TRUE)
third_row=c("Name","Description",colnames(data_in))
new_df<-data.frame(matrix(,nrow=(n_row+1), ncol=(n_col+2)),stringsAsFactors = FALSE)
new_df[1,]<-third_row
new_df[2:(n_row+1),1]<-rownames(data_in)
new_df[2:(n_row+1),2]<-rownames(data_in)
new_df[2:(n_row+1),3:(n_col+2)]<-data_in
write.table(new_df,file = file_address, sep="\t",quote = FALSE, col.names=FALSE, row.names=FALSE,append = TRUE)
}
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
read_gct<-function(file_address){
data_fr=read.delim(file_address, skip = 2,sep = '\t',header=TRUE,row.names = 1)
data_fr <- subset(data_fr, select = -c(Description))
}
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
wordcloud_making<-function(text1,file_name){
save_file_name=paste(file_name,"_WordCloud",sep="")
# # Install
# install.packages("tm")  # for text mining
# install.packages("SnowballC") # for text stemming
# install.packages("wordcloud") # word-cloud generator
# install.packages("RColorBrewer") # color palettes
#require("tm")
#require("SnowballC")
#require("wordcloud")
#require("RColorBrewer")
text1<-as.character(text1)
Encoding(text1) <- 'UTF-8'
# Load the data as a corpus
doc_ids <- c(1)
df <- data.frame(doc_id = doc_ids, text = text1, stringsAsFactors = FALSE)
docs <- Corpus(DataframeSource(df))
inspect(docs)
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("blabla1", "blabla2","genes","response","involved","events","signaling","encoding","pathway"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemminghe
# docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
address=paste(output_address,"report_html/htmls/images/",save_file_name,".svg",sep="")
svglite(file=address,width = 10, height = 6)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
dev.off()
}
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
processTCGA_modules <- function(AMARETTOinit,AMARETTOresults){
all_genes<-unique(c(AMARETTOresults$AllGenes,AMARETTOresults$AllRegulators))
annotation<-data.frame(Gene=all_genes)
annotation$Regulator<-annotation$Gene%in%AMARETTOresults$AllRegulators
all_data<-unique(rbind(AMARETTOinit$MA_matrix_Var,AMARETTOinit$RegulatorData))
rp<-t(AMARETTOresults$RegulatoryPrograms)
ma<-AMARETTOresults$ModuleMembership
module_weights<-matrix(0,nrow=length(all_genes),ncol=dim(rp)[2])
rownames(module_weights)<-all_genes
colnames(module_weights)<-colnames(rp)
for(i in 1:dim(module_weights)[1]){
g<-rownames(module_weights)[i]
w<-rep(0,dim(rp)[2])
if(g %in% rownames(rp))
w<-w+rp[g,]
if(g %in% rownames(ma))
w[ma[g,]]<-1+w[ma[g,]]
module_weights[g,]<-w
}
annotation<-cbind(annotation,module_weights)
in_module<-module_weights!=0
colnames(in_module)<-unlist(lapply(colnames(in_module),paste0,"_B"))
annotation<-cbind(annotation,in_module)
gmt_file="./TCGA_modules_target_only.gmt"
for(i in 1:dim(module_weights)[2]){
genes<-rownames(in_module)[which(module_weights[,i]==1)]
if(i==1){
write(c(colnames(module_weights)[i],colnames(module_weights)[i],genes),file=gmt_file,sep = "\t",ncolumns=length(genes)+2)
}else{
write(c(colnames(module_weights)[i],colnames(module_weights)[i],genes),file=gmt_file,sep = "\t",ncolumns=length(genes)+2,append = T)
}
}
aa=c(1)
return(aa)
}
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
HyperGTestGeneEnrichment<-function(gmtfile,testgmtfile,outfile,n_cores,all_gene_address,show.overlapping.genes=FALSE,filter.genes=TRUE,show.unrecognized=FALSE)
{
#library(GSEABase)
#require(plyr)
#
# ## Help section
# if("--help" %in% args) {
#   cat("
#       The R Script HyperGTestGeneEnrichment is used to perform the hypergeometric test.
#
#       Arguments:
#       1) the signature collection
#       2) the genelist
#       3) the output file
#       4) Default FALSE: output the overlapping genes
#       5) Default TRUE: only count the genes in all_genes.txt (useful for e.g. mouse signatures)
#       6) Default TRUE: output genes that are not recognized
#       --help              - print this text
#
#       Example:
#       Rscript HyperGTestGeneEnrichment.R h.all.v5.0.symbols.gmt my_genesignatures.gmt output.txt\n\n")
#
#   q(save="no")
# }
#MSigDB 45956
ref.num<-45956
all_genes<-scan(all_gene_address, what="", sep="\n")
#ref.num<-length(all_genes)
# gmtfile<-args[1]     #signature collection
# testgmtfile<-args[2] #genelist
# outfile<-args[3]     #output file
# show.overlapping.genes<-args[4]
if(show.overlapping.genes){
}
# filter.genes<-as.logical(args[5])
# show.unrecognized<-as.logical(args[6])
test.gmt<-readGMT(testgmtfile) # our gmt_file_output_from Amaretto
gmt.path<-readGMT(gmtfile)  # the hallmarks_and_co2...
out<-c()
out.genes<-c()
if(filter.genes && show.unrecognized){
genes.in.test.gmt<-unlist(test.gmt$genesets)
if(sum(!genes.in.test.gmt %in% all_genes)>0) {
cat("The following genes are not recognized: ",genes.in.test.gmt[!genes.in.test.gmt %in% all_genes],"\n")
}
}
###########################  Parallelizing :
n.cluster <- n_cores
cl2 <- makeCluster(c(rep("localhost", n.cluster)), type = "SOCK")
cluster = cl2
#library(foreach)
#library(doParallel)
registerDoParallel(cores=n.cluster )
getDoParWorkers()
omidindex=0
resultsss<-c()
resultloop<-foreach(j=1:length(test.gmt$genesets), .combine='rbind') %do%
{
print(j)
foreach(i=1:length(gmt.path$genesets),.combine='rbind') %dopar% {
set.num<-length(gmt.path$genesets[[i]])
k<-sum(gmt.path$genesets[[i]] %in% test.gmt$genesets[[j]])
l<-set.num
m<-ref.num
if(filter.genes){
n<-sum(test.gmt$genesets[[j]] %in% all_genes)
}else{
n<-length(test.gmt$genesets[[j]])
}
p1<-phyper(k-1,l,m-l,n,lower.tail=FALSE)
overlapping.genes<-gmt.path$genesets[[i]][gmt.path$genesets[[i]] %in% test.gmt$genesets[[j]]]
overlapping.genes<-gsub('\t',',',as.character(overlapping.genes))
overlapping.genes<-gsub('  ',',',overlapping.genes)
overlapping.genes<-gsub(' ',',',overlapping.genes)
overlapping.genes<-paste(overlapping.genes,collapse = ', ')
if (k>0)
{
c(GENESETNAME=gmt.path$geneset.names[i],GENSETDESCRIPTION=gmt.path$geneset.descriptions[[i]],TESTSETNAME=test.gmt$geneset.names[[j]],p_value=p1,n_Overlapping=k,Overlapping_genes=overlapping.genes)
}
}
}
resultsss<-resultloop
pp<-resultsss[,4]
pp.adj<-p.adjust(pp,method='BH')
resultsss<-cbind(resultsss,pp.adj)
stopCluster(cl2)
outfile.genes<-paste(tools::file_path_sans_ext(outfile),'.genes.',tools::file_ext(outfile),sep="")
col.names2<-c('Geneset','Description','Testset','p-value','n-Overlapping','Overlapping genes','q-value')
colnames(resultsss)<-col.names2
write.table(resultsss,file=outfile.genes,sep='\t',quote=F,col.names=T,row.names=F)
return(c(0))
}
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
HyperGTestGeneEnrichment_serial<-function(gmtfile,testgmtfile,outfile,show.overlapping.genes=FALSE,filter.genes=TRUE,show.unrecognized=FALSE )
{
#library(GSEABase)
#require(plyr)
#
# ## Help section
# if("--help" %in% args) {
#   cat("
#       The R Script HyperGTestGeneEnrichment is used to perform the hypergeometric test.
#
#       Arguments:
#       1) the signature collection
#       2) the genelist
#       3) the output file
#       4) Default FALSE: output the overlapping genes
#       5) Default TRUE: only count the genes in all_genes.txt (useful for e.g. mouse signatures)
#       6) Default TRUE: output genes that are not recognized
#       --help              - print this text
#
#       Example:
#       Rscript HyperGTestGeneEnrichment.R h.all.v5.0.symbols.gmt my_genesignatures.gmt output.txt\n\n")
#
#   q(save="no")
# }
#MSigDB 45956
ref.num<-45956
all_genes<-scan(all_gene_address, what="", sep="\n")
if(show.overlapping.genes){
}
test.gmt<-readGMT(testgmtfile)
gmt.path<-readGMT(gmtfile)
out<-c()
out.genes<-c()
if(filter.genes && show.unrecognized){
genes.in.test.gmt<-unlist(test.gmt$genesets)
if(sum(!genes.in.test.gmt %in% all_genes)>0) {
cat("The following genes are not recognized: ",genes.in.test.gmt[!genes.in.test.gmt %in% all_genes],"\n")
}
}
for(i in 1:length(gmt.path$genesets)){
for(j in 1:length(test.gmt$genesets)){
set.num<-length(gmt.path$genesets[[i]])
k<-sum(gmt.path$genesets[[i]] %in% test.gmt$genesets[[j]])
l<-set.num
m<-ref.num
if(filter.genes){
n<-sum(test.gmt$genesets[[j]] %in% all_genes)
}else{
n<-length(test.gmt$genesets[[j]])
}
p1<-phyper(k-1,l,m-l,n,lower.tail=FALSE)
r<-c(gmt.path$geneset.names[i],gmt.path$geneset.descriptions[[i]],test.gmt$geneset.names[[j]],ref.num,set.num,n,k,p1)
out<-rbind(out,r)
if(show.overlapping.genes){
overlapping.genes<-gmt.path$genesets[[i]][gmt.path$genesets[[i]] %in% test.gmt$genesets[[j]]]
overlapping.genes<-gsub('\t',',',as.character(overlapping.genes))
overlapping.genes<-gsub('  ',',',overlapping.genes)
overlapping.genes<-gsub(' ',',',overlapping.genes)
overlapping.genes<-paste(overlapping.genes,collapse = ', ')
#if(!identical(overlapping.genes, character(0))){print(overlapping.genes)}
if (as.numeric(k)>0){
rr<-c(gmt.path$geneset.names[i],gmt.path$geneset.descriptions[[i]],test.gmt$geneset.names[[j]],p1,k,overlapping.genes)
out.genes<-rbind(out.genes,rr)
}
}
}
}
pp<-out.genes[,4]
pp.adj<-p.adjust(pp,method='BH')
out.genes<-cbind(out.genes,pp.adj)
outfile.genes<-paste(tools::file_path_sans_ext(outfile),'.genes.',tools::file_ext(outfile),sep="")
col.names2<-c('Geneset','Description','Testset','p-value','n-Overlapping','Overlapping genes','q-value')
colnames(out.genes)<-col.names2
write.table(out.genes,file=outfile.genes,sep='\t',quote=F,col.names=T,row.names=F)
return(c(0))
}
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
readGMT<-function (filename)
{
a = scan(filename, what = list("", ""), sep = "\t", quote = NULL,
fill = T, flush = T, multi.line = F,strip.white = TRUE)
geneset.names = a[1][[1]]
geneset.descriptions = a[2][[1]]
dd = scan(filename, what = "", sep = "\t", quote = NULL,strip.white = TRUE)
nn = length(geneset.names)
n = length(dd)
ox = rep(NA, nn)
ii = 1
for (i in 1:nn) {
#print(i)
while ((dd[ii] != geneset.names[i]) | (dd[ii + 1] !=
geneset.descriptions[i])) {
ii = ii + 1
}
ox[i] = ii
ii = ii + 1
}
genesets = vector("list", nn)
for (i in 1:(nn - 1)) {
# print(i, fill = T)
if(nn>1){
i1 = ox[i] + 2
i2 = ox[i + 1] - 1
geneset.descriptions[i] = dd[ox[i] + 1]
current_geneset = dd[i1:i2]
genesets[[i]] = toupper(current_geneset[current_geneset!=""])
}else{
current_geneset = dd[3:n]
genesets[[1]] = toupper(current_geneset[current_geneset!=""])
}
}
geneset.descriptions[nn] = dd[ox[nn] + 1]
current_geneset = dd[(ox[nn] + 2):n]
genesets[[nn]] = toupper(current_geneset[current_geneset!=""])
out = list(genesets = genesets, geneset.names = geneset.names,
geneset.descriptions = geneset.descriptions)
class(out) = "GSA.genesets"
return(out)
}
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
rm(list=ls(all=TRUE))  # To Remove Everything
#install.packages("/Users/mohsennabian/Dropbox/Harvard/amaretto/AMARETTO-develop-mixed", repos = NULL, type = "source")
library("AMARETTO")
source('./AMARETTO_html_report.R')
########################################################
# LIHC Data : these 3 Data files must be in the same dirctory or change their address
########################################################
MA_matrix <- data.matrix(read_gct('./data/TCGA_LIHC_Expression.gct'))
CNV_matrix <-data.matrix(read_gct('./data/TCGA_LIHC_CNV.gct'))
MET_matrix <-data.matrix(read_gct('./data/TCGA_LIHC_Methylation.gct'))
help(zip)
"zip"
rm(list=ls(all=TRUE))  # To Remove Everything
#install.packages("/Users/mohsennabian/Dropbox/Harvard/amaretto/AMARETTO-develop-mixed", repos = NULL, type = "source")
library("AMARETTO")
source('./AMARETTO_html_report.R')
#load(file="hyper_geo_test/AMARETTOinit.Rda")
#load(file="hyper_geo_test/AMARETTOresults.Rda")
########################## LIHC
load(file="/Users/mohsennabian/Dropbox/Harvard/amaretto/LIHC_AMARETTO_RESULTS/AMARETTOinit.Rda")
load(file="/Users/mohsennabian/Dropbox/Harvard/amaretto/LIHC_AMARETTO_RESULTS/AMARETTOresults.Rda")
source('./AMARETTO_html_report.R')
res<-amaretto_html_report(AMARETTOinit,AMARETTOresults,CNV_matrix,MET_matrix,VarPercentage,hyper_geo_test_bool=TRUE,wordcloud_bool=FALSE,output_address='/Users/mohsennabian/Desktop/amaretto_reports/',output_name='LIHC')
#load(file="hyper_geo_test/AMARETTOinit.Rda")
#load(file="hyper_geo_test/AMARETTOresults.Rda")
########################## LIHC
load(file="/Users/mohsennabian/Dropbox/Harvard/amaretto/LIHC_AMARETTO_RESULTS/AMARETTOinit.Rda")
########################################################
# LIHC Data : these 3 Data files must be in the same dirctory or change their address
########################################################
MA_matrix <- data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_LIHC_Expression.gct'))
CNV_matrix <-data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_LIHC_CNV.gct'))
MET_matrix <-data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_LIHC_Methylation.gct'))
NrModules <- 150
VarPercentage <- 75
rm(list=ls(all=TRUE))  # To Remove Everything
install.packages("/Users/mohsennabian/Dropbox/Harvard/amaretto/AMARETTO-develop-Jay", repos = NULL, type = "source")
detach("package:AMARETTO", unload=TRUE)
remove.packages("AMARETTO", lib="~/Library/R/3.5/library")
install.packages("/Users/mohsennabian/Dropbox/Harvard/amaretto/AMARETTO-develop-Jay", repos = NULL, type = "source")
library("AMARETTO")
source('./AMARETTO_html_report.R')
########################################################
# Demo data
########################################################
data(Driver_Genes)
data(ProcessedDataLAML)
MA_matrix<-data.matrix(ProcessedDataLAML$MA_TCGA)
CNV_matrix<-data.matrix(ProcessedDataLAML$CNV_TCGA)
MET_matrix<-data.matrix(ProcessedDataLAML$MET_TCGA)
NrModules <- 10
VarPercentage <- 20
########################################################
# LIHC Data : these 3 Data files must be in the same dirctory or change their address
########################################################
MA_matrix <- data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_LIHC_Expression.gct'))
CNV_matrix <-data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_LIHC_CNV.gct'))
MET_matrix <-data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_LIHC_Methylation.gct'))
NrModules <- 150
VarPercentage <- 75
########################################################
# Running AMARETTO
########################################################
AMARETTOinit<-AMARETTO_Initialize(MA_matrix=MA_matrix,CNV_matrix=CNV_matrix,MET_matrix=MET_matrix, NrModules=NrModules,VarPercentage=VarPercentage)
AMARETTOresults<-AMARETTO_Run(AMARETTOinit)
save(AMARETTOinit,file="/Users/mohsennabian/Dropbox/Harvard/amaretto/LIHC_AMARETTO_RESULTS/AMARETTOinit.Rda")
save(AMARETTOresults,file="/Users/mohsennabian/Dropbox/Harvard/amaretto/LIHC_AMARETTO_RESULTS/AMARETTOresults.Rda")
save(AMARETTOinit,file="/Users/mohsennabian/Dropbox/Harvard/amaretto/LIHC_AMARETTO_RESULTS/AMARETTOinit.Rda")
save(AMARETTOresults,file="/Users/mohsennabian/Dropbox/Harvard/amaretto/LIHC_AMARETTO_RESULTS/AMARETTOresults.Rda")
########################################################
# LIHC Data : these 3 Data files must be in the same dirctory or change their address
########################################################
# MA_matrix <- data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_LIHC_Expression.gct'))
# CNV_matrix <-data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_LIHC_CNV.gct'))
# MET_matrix <-data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_LIHC_Methylation.gct'))
MA_matrix <- data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_GBM_Expression.gct'))
CNV_matrix <-data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_GBM_CNV.gct'))
MET_matrix <-data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_GBM_Methylation.gct'))
NrModules <- 150
VarPercentage <- 75
help("AMARETTO_Run")
########################################################
# Running AMARETTO
########################################################
AMARETTOinit<-AMARETTO_Initialize(MA_matrix=MA_matrix,CNV_matrix=CNV_matrix,MET_matrix=MET_matrix, NrModules=NrModules,VarPercentage=VarPercentage)
AMARETTOresults<-AMARETTO_Run(AMARETTOinit,NrCores=4)
########################################################
# Running AMARETTO
########################################################
AMARETTOinit<-AMARETTO_Initialize(MA_matrix=MA_matrix,CNV_matrix=CNV_matrix,MET_matrix=MET_matrix, NrModules=NrModules,VarPercentage=VarPercentage,NrCores=4)
AMARETTOresults<-AMARETTO_Run(AMARETTOinit)
save(AMARETTOinit,file="/Users/mohsennabian/Dropbox/Harvard/amaretto/GBM_AMARETTO_RESULTS/AMARETTOinit.Rda")
save(AMARETTOresults,file="/Users/mohsennabian/Dropbox/Harvard/amaretto/GBM_AMARETTO_RESULTS/AMARETTOresults.Rda")
res<-amaretto_html_report(AMARETTOinit,AMARETTOresults,CNV_matrix,MET_matrix,VarPercentage,hyper_geo_test_bool=TRUE,wordcloud_bool=FALSE,output_address='/Users/mohsennabian/Desktop/amaretto_reports/',output_name='LIHC')
res<-amaretto_html_report(AMARETTOinit,AMARETTOresults,CNV_matrix,MET_matrix,VarPercentage,hyper_geo_test_bool=TRUE,wordcloud_bool=FALSE,output_address='/Users/mohsennabian/Desktop/amaretto_reports/',output_name='GBM')
source('./AMARETTO_html_report.R')
rm(list=ls(all=TRUE))  # To Remove Everything
library("AMARETTO")
source('./AMARETTO_html_report.R')
load(file="/Users/mohsennabian/Dropbox/Harvard/amaretto/LIHC_AMARETTO_RESULTS/AMARETTOinit.Rda")
load(file="/Users/mohsennabian/Dropbox/Harvard/amaretto/LIHC_AMARETTO_RESULTS/AMARETTOresults.Rda")
res<-amaretto_html_report(AMARETTOinit,AMARETTOresults,CNV_matrix,MET_matrix,VarPercentage,hyper_geo_test_bool=TRUE,wordcloud_bool=FALSE,output_address='/Users/mohsennabian/Desktop/amaretto_reports/',output_name='LIHC')
########################################################
# LIHC Data : these 3 Data files must be in the same dirctory or change their address
########################################################
MA_matrix <- data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_LIHC_Expression.gct'))
########################################################
# LIHC Data : these 3 Data files must be in the same dirctory or change their address
########################################################
MA_matrix <- data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_LIHC_Expression.gct'))
CNV_matrix <-data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_LIHC_CNV.gct'))
MET_matrix <-data.matrix(read_gct('/Users/mohsennabian/Dropbox/Harvard/amaretto/TCGA_LIHC_Methylation.gct'))
res<-amaretto_html_report(AMARETTOinit,AMARETTOresults,CNV_matrix,MET_matrix,VarPercentage,hyper_geo_test_bool=TRUE,wordcloud_bool=FALSE,output_address='/Users/mohsennabian/Desktop/amaretto_reports/',output_name='LIHC')
NrModules <- 150
VarPercentage <- 75
res<-amaretto_html_report(AMARETTOinit,AMARETTOresults,CNV_matrix,MET_matrix,VarPercentage,hyper_geo_test_bool=TRUE,wordcloud_bool=FALSE,output_address='/Users/mohsennabian/Desktop/amaretto_reports/',output_name='LIHC')
